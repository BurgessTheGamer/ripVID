name: Desktop App Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 2.0.1)'
        required: true
        type: string

env:
  TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
  TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}

jobs:
  create-release:
    permissions:
      contents: write
    runs-on: ubuntu-latest
    outputs:
      release_id: ${{ steps.create-release.outputs.result }}
      version: ${{ steps.version.outputs.version }}

    steps:
      - uses: actions/checkout@v4

      - name: Extract version
        id: version
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION=${GITHUB_REF#refs/tags/v}
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"

      - name: Generate Changelog
        id: changelog
        uses: mikepenz/release-changelog-builder-action@v4
        with:
          configuration: ".github/changelog-config.json"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Release
        id: create-release
        uses: actions/github-script@v7
        with:
          script: |
            const { data } = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: `v${{ steps.version.outputs.version }}`,
              name: `ripVID v${{ steps.version.outputs.version }}`,
              body: `${{ steps.changelog.outputs.changelog }}`,
              draft: true,
              prerelease: false
            })
            return data.id

  build-tauri:
    needs: create-release
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest'
            args: '--target universal-apple-darwin'
            os_name: 'macOS'
          - platform: 'ubuntu-22.04'
            args: ''
            os_name: 'Linux'
          - platform: 'windows-latest'
            args: ''
            os_name: 'Windows'

    runs-on: ${{ matrix.platform }}

    steps:
      - uses: actions/checkout@v4

      # Setup Bun
      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      # Install system dependencies (Linux)
      - name: Install dependencies (Linux)
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libwebkit2gtk-4.1-dev \
            libjavascriptcoregtk-4.1-dev \
            libsoup-3.0-dev \
            libgtk-3-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev \
            patchelf

      # Install Rust
      - name: Install Rust Stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      # Cache Rust dependencies
      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: src-tauri

      # Install Node dependencies
      - name: Install frontend dependencies
        run: bun install

      # Run tests (skip if no tests exist)
      - name: Run tests
        run: bun test || true

      # Import Code Signing Certificate (macOS)
      - name: Import Code Signing Certificate (macOS)
        if: matrix.platform == 'macos-latest'
        env:
          MACOS_CERTIFICATE: ${{ secrets.MACOS_CERTIFICATE }}
          MACOS_CERTIFICATE_PWD: ${{ secrets.MACOS_CERTIFICATE_PWD }}
          KEYCHAIN_PWD: ${{ secrets.KEYCHAIN_PWD }}
        run: |
          if [ -n "$MACOS_CERTIFICATE" ]; then
            echo "Setting up macOS code signing..."
            echo "$MACOS_CERTIFICATE" | base64 --decode > certificate.p12
            security create-keychain -p "$KEYCHAIN_PWD" build.keychain
            security default-keychain -s build.keychain
            security unlock-keychain -p "$KEYCHAIN_PWD" build.keychain
            security import certificate.p12 -k build.keychain -P "$MACOS_CERTIFICATE_PWD" -T /usr/bin/codesign
            security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PWD" build.keychain
            echo "‚úÖ Certificate imported successfully"
          else
            echo "‚ö†Ô∏è  No macOS certificate configured - building unsigned app"
          fi

      # Setup Windows Code Signing Certificate
      - name: Setup Windows Code Signing
        if: matrix.platform == 'windows-latest'
        env:
          WINDOWS_CERTIFICATE: ${{ secrets.WINDOWS_CERTIFICATE }}
          WINDOWS_CERTIFICATE_PWD: ${{ secrets.WINDOWS_CERTIFICATE_PWD }}
        run: |
          if ($env:WINDOWS_CERTIFICATE) {
            echo "Setting up Windows code signing..."
            # Certificate will be used by Tauri during build
          } else {
            echo "No Windows certificate configured - skipping code signing"
          }
        shell: pwsh

      # Build Tauri App
      - name: Build Tauri App
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # Only enable signing if certificates are available
          ENABLE_CODE_SIGNING: ${{ secrets.MACOS_CERTIFICATE != '' && secrets.APPLE_SIGNING_IDENTITY || '' }}
          APPLE_CERTIFICATE: ${{ secrets.MACOS_CERTIFICATE != '' && secrets.MACOS_CERTIFICATE || '' }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.MACOS_CERTIFICATE != '' && secrets.MACOS_CERTIFICATE_PWD || '' }}
          APPLE_ID: ${{ secrets.MACOS_CERTIFICATE != '' && secrets.APPLE_ID || '' }}
          APPLE_PASSWORD: ${{ secrets.MACOS_CERTIFICATE != '' && secrets.APPLE_PASSWORD || '' }}
          APPLE_TEAM_ID: ${{ secrets.MACOS_CERTIFICATE != '' && secrets.APPLE_TEAM_ID || '' }}
          WINDOWS_CERTIFICATE: ${{ secrets.WINDOWS_CERTIFICATE || '' }}
          WINDOWS_CERTIFICATE_PASSWORD: ${{ secrets.WINDOWS_CERTIFICATE_PWD || '' }}
        with:
          releaseId: ${{ needs.create-release.outputs.release_id }}
          args: ${{ matrix.args }}
          packageManager: bun

      # Upload build artifacts
      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ripvid-${{ matrix.os_name }}-${{ needs.create-release.outputs.version }}
          path: |
            src-tauri/target/release/bundle/**/*
          if-no-files-found: error
          retention-days: 30

  publish-release:
    permissions:
      contents: write
    runs-on: ubuntu-latest
    needs: [create-release, build-tauri]

    steps:
      - uses: actions/checkout@v4

      # Publish Release
      - name: Publish Release
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            await github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: ${{ needs.create-release.outputs.release_id }},
              draft: false
            })

      # Create Sentry Release (if configured)
      - name: Create Sentry Release
        if: env.SENTRY_AUTH_TOKEN != ''
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
          SENTRY_PROJECT: ${{ secrets.SENTRY_PROJECT }}
        run: |
          curl -sL https://sentry.io/get-cli/ | bash
          sentry-cli releases new "ripvid@${{ needs.create-release.outputs.version }}"
          sentry-cli releases set-commits "ripvid@${{ needs.create-release.outputs.version }}" --auto
          sentry-cli releases finalize "ripvid@${{ needs.create-release.outputs.version }}"

      # Notify success
      - name: Notify Release Success
        run: |
          echo "‚úÖ Release v${{ needs.create-release.outputs.version }} published successfully!"
          echo "üîó View release: https://github.com/${{ github.repository }}/releases/tag/v${{ needs.create-release.outputs.version }}"

  # Security scan
  security-scan:
    runs-on: ubuntu-latest
    needs: build-tauri

    steps:
      - uses: actions/checkout@v4

      - name: Run Security Audit
        run: |
          echo "Running security audit..."
          # Add security scanning tools here

      - name: Check for vulnerabilities
        run: |
          echo "Checking for known vulnerabilities..."
          # Add vulnerability scanning
